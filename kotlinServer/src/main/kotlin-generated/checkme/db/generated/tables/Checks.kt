/*
 * This file is generated by jOOQ.
 */
package checkme.db.generated.tables


import checkme.db.generated.Public
import checkme.db.generated.keys.CHECKS_PKEY
import checkme.db.generated.tables.records.ChecksRecord

import java.time.LocalDateTime

import javax.annotation.processing.Generated

import kotlin.collections.Collection

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.10",
        "catalog version:02",
        "schema version:02"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class Checks(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, ChecksRecord>?,
    parentPath: InverseForeignKey<out Record, ChecksRecord>?,
    aliased: Table<ChecksRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<ChecksRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.checks</code>
         */
        val CHECKS: Checks = Checks()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ChecksRecord> = ChecksRecord::class.java

    /**
     * The column <code>public.checks.taskid</code>.
     */
    val TASKID: TableField<ChecksRecord, Int?> = createField(DSL.name("taskid"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.checks.userid</code>.
     */
    val USERID: TableField<ChecksRecord, Int?> = createField(DSL.name("userid"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>public.checks.date</code>.
     */
    val DATE: TableField<ChecksRecord, LocalDateTime?> = createField(DSL.name("date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    /**
     * The column <code>public.checks.status</code>.
     */
    val STATUS: TableField<ChecksRecord, String?> = createField(DSL.name("status"), SQLDataType.CLOB.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<ChecksRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<ChecksRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<ChecksRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.checks</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.checks</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.checks</code> table reference
     */
    constructor(): this(DSL.name("checks"), null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIdentity(): Identity<ChecksRecord, Int?> = super.getIdentity() as Identity<ChecksRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<ChecksRecord> = CHECKS_PKEY
    override fun `as`(alias: String): Checks = Checks(DSL.name(alias), this)
    override fun `as`(alias: Name): Checks = Checks(alias, this)
    override fun `as`(alias: Table<*>): Checks = Checks(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Checks = Checks(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Checks = Checks(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Checks = Checks(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Checks = Checks(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Checks = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Checks = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Checks = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Checks = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Checks = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Checks = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Checks = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Checks = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Checks = where(DSL.notExists(select))
}
